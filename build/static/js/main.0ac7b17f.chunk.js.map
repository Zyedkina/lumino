{"version":3,"sources":["components/lumino.png","components/Navigation.js","components/Logo.js","components/FaceRecognition.js","components/ImgLinkForm.js","components/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Logo","className","options","max","style","display","alignItems","height","width","src","lumino","alt","FaceRecognition","url","box","a","b","console","log","id","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","ImgLinkForm","onChangeURL","onSubmit","type","placeholder","onChange","onClick","borderColor","backgroundColor","app","Clarifai","App","apiKey","param","number","value","density","enable","value_area","props","calFaceBox","response","cal","outputs","data","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","boxF","setState","event","input","target","state","imgURL","models","predict","then","catch","err","this","params","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,iSCGlBC,Y,0DCoBVC,E,uKAhBX,OACE,yBAAKC,UAAU,kBACb,kBAAC,IAAD,CACEA,UAAU,2BACVC,QAAS,CAAEC,IAAK,IAChBC,MAAO,CAACC,QAAS,OAAQC,WAAY,SAAUC,OAAQ,IAAKC,MAAO,MAEnE,yBAAKP,UAAU,kBACX,yBAAKQ,IAAKC,IAAQC,IAAI,gB,GAVjBZ,aCYJa,G,MAdS,SAAC,GAAgB,IAAfC,EAAc,EAAdA,IAAKC,EAAS,EAATA,IACvBC,EAAIF,EACJG,EAAIF,EAER,OADAG,QAAQC,IAAI,YAAaJ,GAErB,yBAAKb,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKkB,GAAG,QAAQR,IAAI,GAAGF,IAAKM,EAAGP,MAAM,QAAQD,OAAO,SACpD,yBAAKN,UAAU,eAAeG,MAAO,CAACgB,IAAKJ,EAAEK,OAAQC,MAAON,EAAEO,SAAUC,OAAQR,EAAES,UAAUC,KAAMV,EAAEW,eCSrGC,G,MAjBK,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAC/B,OACE,yBAAK7B,UAAU,IACX,uBAAGA,UAAU,SAAS,+DACtB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gCACX,2BAAO8B,KAAK,OAAO9B,UAAU,qBAC3B+B,YAAY,gCACZC,SAAUJ,IAEZ,4BAAQK,QAASJ,EAAU7B,UAAU,mCAAmCG,MAAO,CAAE+B,YAAa,OAAQC,gBAAiB,YAAvH,e,GCXCrC,Y,OCSbsC,EAAM,I,OAAIC,EAASC,KAAI,CAC3BC,OAAQ,qCAGJC,EAAQ,CACZC,OAAQ,CACNC,MAAO,GACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,OAgEHP,E,kDA1Db,WAAYQ,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,WAAa,SAACC,GACZ,IAAMC,EAAMD,EAASE,QAAQ,GAAGC,KAAKC,QAAQ,GAAGC,YAAYC,aACtDC,EAAQC,SAASC,eAAe,SAChClD,EAAQmD,OAAOH,EAAMhD,OACrBD,EAASoD,OAAQH,EAAMjD,QAC7B,MAAO,CACLoB,QAAUuB,EAAIU,SAAWpD,EACzBa,OAAS6B,EAAIW,QAAUtD,EACvBgB,SAAWf,EAAS0C,EAAIY,UAAYtD,EACpCiB,UAAYlB,EAAU2C,EAAIa,WAAaxD,IAlBxB,EAsBnByD,eAAiB,SAACC,GAEhB,EAAKC,SAAS,CAACpD,IAAKmD,KAxBH,EA2BnBpC,YAAc,SAACsC,GACb,EAAKD,SAAS,CAAEE,MAAOD,EAAME,OAAO1B,SA5BnB,EA+BnBb,SAAW,WACT,EAAKoC,UAAS,SAACI,GAAD,MAAY,CACxBC,OAAQD,EAAMF,MACdtD,IAAK,OAEPuB,EAAImC,OAAOC,QAAQ,mCAAoC,EAAKH,MAAMF,OAC/DM,MAAM,SAAAzB,GAAQ,OAAI,EAAKe,eAAe,EAAKhB,WAAWC,OACtD0B,OAAM,SAAAC,GAAG,OAAI3D,QAAQC,IAAI,iBAAkB0D,OApC9C,EAAKN,MAAQ,CACXF,MAAO,GACPG,OAAS,GACTzD,IAAK,IALU,E,qDA0CjB,IAAIyD,EAASM,KAAKP,MAAMC,OACxB,OACE,yBAAKtE,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YAAY6E,OAAQrC,IAGzC,kBAAC,EAAD,MAGA,kBAAC,EAAD,CAAaZ,YAAagD,KAAKhD,YAAaC,SAAU+C,KAAK/C,WAC3D,kBAAC,EAAD,CAAiBhB,IAAK+D,KAAKP,MAAMxD,IAAKD,IAAM0D,S,GArDlCxE,aCbEgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAiB,GACL3E,QAAQ2E,MAAMA,EAAMC,c","file":"static/js/main.0ac7b17f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lumino.fd742692.png\";","import React, { Component } from 'react';\nimport './Navigation.css';\n\nclass Navigation extends Component {\n    render() {\n        return (\n            <div className=\"fontU \">\n                <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\n                    <p id='signIn' className='f3 link dim grey pa3 pointer'>Sign Out</p>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;","import React, { Component } from \"react\";\nimport \"./Logo.css\";\nimport Tilt from \"react-tilt\";\nimport lumino from './lumino.png';\n\nclass Logo extends Component {\n  render() {\n    return (\n      <div className=\"ma4 mt5 center\">\n        <Tilt\n          className=\"Tilt br2 shadow-2 center\"\n          options={{ max: 45 }}\n          style={{display: 'flex', alignItems: 'center', height: 150, width: 150 }}\n        >\n          <div className=\"Tilt-inner pa1\">\n              <img src={lumino} alt='logo'/>\n          </div>\n        </Tilt>\n      </div>\n    );\n  }\n}\n\nexport default Logo;\n","import React from \"react\";\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({url, box}) => {\n    let a = url;\n    let b = box;\n    console.log(\"Face Box \", box);\n    return (\n        <div className=\"center ma\" >\n            <div className=\"center absolute mt2\">\n                <img id='image' alt=\"\" src={a} width='500px' height='auto' />\n                <div className=\"bounding-box\" style={{top: b.topRow, right: b.rightCol, bottom: b.bottomRow,left: b.leftCol }}></div>\n            </div>\n        </div>\n    );\n}\n\nexport default FaceRecognition;\n\n","import React from \"react\";\nimport './ImgLinkForm.css';\n\nconst ImgLinkForm = ({onChangeURL, onSubmit}) => {\n    return (\n      <div className=\"\">\n          <p className=\"fontA\">{'This is an A.I. based face detection system. Give it a try.'}</p>\n          <div className='center'>\n              <div className='nice pa4 br3 center shadow-5'>\n                  <input type='text' className='w-70 f4 pa2 center'\n                    placeholder='Enter image (png or jpg) link'\n                    onChange={onChangeURL}\n                  />\n                  <button onClick={onSubmit} className='fontRS w-30 grow f4 link ph3 pv2' style={{ borderColor: \"grey\", backgroundColor: \"#F17D16\" }}>Detect</button>\n              </div>\n          </div>\n      </div>\n    );\n}\n\nexport default ImgLinkForm;\n","import React, { Component } from \"react\";\n\nclass Rank extends Component {\n    render() {\n        return (\n            <div className=\"fontIn\">\n                <div className=\"white f2\">\n                    {\"Anik, your current rank is ...\"}\n                </div>\n                <div className=\"white f1\">\n                    {\"#3\"}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Rank;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation';\nimport Particles from \"react-particles-js\";\nimport Logo from './components/Logo';\nimport FaceRecognition from './components/FaceRecognition';\nimport ImgLinkForm from './components/ImgLinkForm';\nimport Rank from './components/Rank';\n//const Clarifai = require('clarifai');\nimport Clarifai from 'clarifai';\n\nconst app = new Clarifai.App({\n  apiKey: '09f7fc57537a44df828b43038f1c4e57',\n});\n\nconst param = {\n  number: {\n    value: 10,\n    density: {\n      enable: true,\n      value_area: 1000\n    }\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      imgURL : '',\n      box: {} \n    };\n  }\n\n  calFaceBox = (response) => {\n    const cal = response.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('image');\n    const width = Number(image.width);\n    const height = Number (image.height);\n    return {\n      leftCol : cal.left_col * width,\n      topRow : cal.top_row * height,\n      rightCol : width - (cal.right_col * width),\n      bottomRow : height - (cal.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (boxF) => {\n  //  console.log(\"displayBox \",box);\n    this.setState({box: boxF});\n  }\n\n  onChangeURL = (event) => {\n    this.setState({ input: event.target.value });\n  }\n\n  onSubmit = () => {\n    this.setState((state) => ({\n      imgURL: state.input,\n      box: {}\n    }));\n    app.models.predict(\"a403429f2ddf4b49b307e318f00e528b\", this.state.input)\n      .then( response => this.displayFaceBox(this.calFaceBox(response)))\n      .catch(err => console.log(\"Error Baby :( \", err));\n  }\n\n  render() {\n    let imgURL = this.state.imgURL;\n    return (\n      <div className=\"App\">\n        <Particles className='particles' params={param}/>\n        {//  <Navigation /> \n        }\n        <Logo/>\n        {//  <Rank/>\n        }\n        <ImgLinkForm onChangeURL={this.onChangeURL} onSubmit={this.onSubmit}/>\n        <FaceRecognition box={this.state.box} url= {imgURL}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n    // app.models.predict(Clarifai.COLOR_MODEL,\n    // // URL\n    //   \"https://samples.clarifai.com/metro-north.jpg\")\n    //   .then(function(response) {\n    //     // do something with responseconsole.log(response);\n\n    //     },\n    //     function(err) {// there was an error\n\n    //     }\n    //   );\n\n    // app.models.predict(\"a403429f2ddf4b49b307e318f00e528b\",this.state.input)\n    // .then(\n    //   response => {\n    //     let res = response.outputs[0].data.regions;\n    //     console.log(\"app \",res);\n\n    //     const cal = res[0].region_info.bounding_box;\n    //     const image = document.getElementById('image');\n    //     const width = Number(image.width);\n    //     const height = Number(image.height);\n    //     let boxF = {\n    //       leftCol: cal.left_col * width,\n    //       topRow: cal.top_row * height,\n    //       rightCol: width - (cal.right_col * width),\n    //       bottomRow: height - (cal.bottom_row * height)\n    //     };\n    //     console.log(boxF);\n    //     this.setState({ box: boxF });\n    //     console.log(\"boxbox \",this.state.box);\n    //   })\n    //   .catch (err => console.log(\"Error Baby :( \", err));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}